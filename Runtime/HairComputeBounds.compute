#pragma kernel KClearBuffer
#pragma kernel KComputeBoundsStrands
#pragma kernel KComputeBoundsRoots

#pragma enable_d3d11_debug_symbols

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Packing.hlsl"
#include "Packages/com.unity.shadergraph/ShaderGraphLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.shadergraph/ShaderGraphLibrary/ShaderVariablesFunctions.hlsl"

#include "HairVertex.hlsl"
float3 _BoundsMargin;
// minimum corner (12 bytes)
// maximum corner (12 bytes)
RWByteAddressBuffer _BoundsBuffer;

// Converts a float to an unsigned integer in a way that preserves the order of the numbers
uint FloatToOrderedUint(float value)
{
    uint u = asuint(value);
    return u >> 31 ? ~u : (u | (1 << 31));
}

[numthreads(1, 1, 1)]
void KClearBuffer()
{
    _BoundsBuffer.Store(0u,  UINT_MAX); // x
    _BoundsBuffer.Store(4u,  UINT_MAX); // y
    _BoundsBuffer.Store(8u,  UINT_MAX); // z
    _BoundsBuffer.Store(12u, 0u);       // x
    _BoundsBuffer.Store(16u, 0u);       // y
    _BoundsBuffer.Store(20u, 0u);       // z
}

void ExpandBounds(float3 positionOS, float3 pointSize)
{
    const float3 cornerMin = positionOS - pointSize;
    const float3 cornerMax = positionOS + pointSize;
    
    const uint sortableXMin = FloatToOrderedUint(cornerMin.x);
    const uint sortableYMin = FloatToOrderedUint(cornerMin.y);
    const uint sortableZMin = FloatToOrderedUint(cornerMin.z);

    const uint sortableXMax = FloatToOrderedUint(cornerMax.x);
    const uint sortableYMax = FloatToOrderedUint(cornerMax.y);
    const uint sortableZMax = FloatToOrderedUint(cornerMax.z);

    // TODO: Optimize
    {
        _BoundsBuffer.InterlockedMin(0u,  sortableXMin);
        _BoundsBuffer.InterlockedMin(4u,  sortableYMin);
        _BoundsBuffer.InterlockedMin(8u,  sortableZMin);

        // There seems to be some ~0 results that produce nans later on, guard it here.
        if (sortableXMax != UINT_MAX) _BoundsBuffer.InterlockedMax(12u, sortableXMax);
        if (sortableYMax != UINT_MAX) _BoundsBuffer.InterlockedMax(16u, sortableYMax);
        if (sortableZMax != UINT_MAX) _BoundsBuffer.InterlockedMax(20u, sortableZMax);
    }
}
[numthreads(64, 1, 1)]
void KComputeBoundsStrands(uint3 dispatchID : SV_DispatchThreadID)
{
    if(dispatchID.x >= _StrandParticleCount*_SolverStrandCount)
        return;

    // Load the current 
    float3 positionOS = LoadPosition(dispatchID.x);
    ExpandBounds(positionOS, 0);
}


[numthreads(64, 1, 1)]
void KComputeBoundsRoots(uint3 dispatchID : SV_DispatchThreadID)
{
    if (dispatchID.x >= _SolverStrandCount)
        return;

    // Load the current 
    float3 positionOS = _RootPosition[dispatchID.x];
    ExpandBounds(positionOS, _BoundsMargin);
}
